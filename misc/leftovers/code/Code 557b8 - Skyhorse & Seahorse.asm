

;
; +-------------------------------------------------------------------------+
; |	This file is generated by The Interactive Disassembler (IDA)	    |
; |	Copyright (c) 2007 by DataRescue sa/nv,	<ida@datarescue.com>	    |
; |	    Licensed to: GVU, Gerhard Uphoff, 1	user, adv, 10/2007	    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	F83A4BDA75022026C5CD00F1F855AC07

; ---------------------------------------------------------------------------
; File Name   :	Z:\emu\gen\s2a\sym\copies\code_557b8
; Format      :	Binary file
; Base Address:	0000h Range: 0000h - 0860h Loaded length: 0860h

; Processor:	    68000
; Target Assembler: 680x0 Assembler in MRI compatible mode
; This file should be compiled with "as	-M"

; ===========================================================================

; Segment type:	Pure code
; segment "ROM"

seahorse:
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	seahorse_move_tbl(pc,d0.w),d1
		jmp	seahorse_move_tbl(pc,d1.w)
; ---------------------------------------------------------------------------
seahorse_move_tbl:dc.w seahorseinit-seahorse_move_tbl ;	DATA XREF: ROM:seahorse_move_tblo
					; ROM:00000010o ...
		dc.w _worknai$vdba-seahorse_move_tbl
		dc.w seahorsewings-seahorse_move_tbl
		dc.w seahorseshot-seahorse_move_tbl
		dc.w shotdrops-seahorse_move_tbl
		dc.w oilslip-seahorse_move_tbl
; ---------------------------------------------------------------------------

seahorseinit:				; DATA XREF: ROM:seahorse_move_tblo
		addq.b	#2,$24(a0)
		move.l	#$1542C,4(a0)
		move.w	#$2570,2(a0)
		or.b	#4,1(a0)
		move.b	#$A,$20(a0)
		move.b	#4,$18(a0)
		move.b	#$10,$19(a0)
		move.w	#$FF00,$10(a0)
		move.b	$28(a0),d0
		move.b	d0,d1
		and.w	#$F0,d1	; 'ð'
		lsl.w	#4,d1
		move.w	d1,$2E(a0)
		move.w	d1,$30(a0)
		and.w	#$F,d0
		lsl.w	#4,d0
		subq.w	#1,d0
		move.w	d0,$32(a0)
		move.w	d0,$34(a0)
		move.w	$C(a0),$2A(a0)
		bsr.w	$FFFF8B46	; XREF:	actwkchk
		bne.s	_worknai$vdba
		move.b	#$50,0(a1) ; 'P'
		move.b	#4,$24(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		add.w	#$A,8(a1)
		add.w	#-6,$C(a1)
		move.l	#$1542C,4(a1)
		move.w	#$24E0,2(a1)
		or.b	#4,1(a1)
		move.b	#3,$18(a1)
		move.b	$22(a0),$22(a1)
		move.b	#3,$1C(a1)
		move.l	a1,$36(a0)
		move.l	a0,$36(a1)
		bset	#6,$22(a0)

_worknai$vdba:				; CODE XREF: ROM:00000078j
					; DATA XREF: ROM:00000010o
		lea	($153F4).l,a1
		bsr.w	$872		; XREF:	patchg
		move.w	#$39C,($FFFFF646).w
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	seahorsemove_tbl(pc,d0.w),d1
		jsr	seahorsemove_tbl(pc,d1.w)
		bsr.w	fixwings
		bra.w	$86C		; XREF:	frameoutchk
; ---------------------------------------------------------------------------
seahorsemove_tbl:dc.w seahorseswim-seahorsemove_tbl ; DATA XREF: ROM:seahorsemove_tblo
					; ROM:000000FAo ...
		dc.w seahorsefloat-seahorsemove_tbl
		dc.w seahorseattack-seahorsemove_tbl
; ---------------------------------------------------------------------------

seahorsewings:				; DATA XREF: ROM:00000012o
		move.l	$36(a0),a1
		tst.b	(a1)
		beq.w	$866		; XREF:	frameout
		cmp.b	#$50,(a1) ; 'P'
		bne.w	$866		; XREF:	frameout
		btst	#7,$22(a1)
		bne.w	$866		; XREF:	frameout
		lea	($153F4).l,a1
		bsr.w	$872		; XREF:	patchg
		bra.w	$860		; XREF:	actionsub
; ---------------------------------------------------------------------------

seahorseshot:				; DATA XREF: ROM:00000014o
		bsr.w	chkhit
		bsr.w	$87E		; XREF:	speedset2
		lea	($153F4).l,a1
		bsr.w	$872		; XREF:	patchg
		bra.w	$86C		; XREF:	frameoutchk
; ---------------------------------------------------------------------------

seahorseswim:				; DATA XREF: ROM:seahorsemove_tblo
		bsr.w	$87E		; XREF:	speedset2
		bsr.w	chkflip
		bsr.w	chkfloat
		bsr.w	chkatack
		rts
; ---------------------------------------------------------------------------

seahorsefloat:				; DATA XREF: ROM:000000FAo
		bsr.w	$87E		; XREF:	speedset2
		bsr.w	chkflip
		bsr.w	chkfltdone
		rts
; ---------------------------------------------------------------------------

seahorseattack:				; DATA XREF: ROM:000000FCo
		bsr.w	$878		; XREF:	speedset
		bsr.w	chkflip
		bsr.w	chkshot
		bsr.w	chkatkdone
		rts

; =============== S U B	R O U T	I N E =======================================


chkshot:				; CODE XREF: ROM:00000166p
		tst.b	$2D(a0)
		bne.s	_end$deba
		tst.w	$12(a0)
		bpl.s	_makeshot$deba

_end$deba:				; CODE XREF: chkshot+4j
		rts
; ---------------------------------------------------------------------------

_makeshot$deba:				; CODE XREF: chkshot+Aj
		st	$2D(a0)
		bsr.w	$FFFF8B46	; XREF:	actwkchk
		bne.s	_worknai$deba
		move.b	#$50,0(a1) ; 'P'
		move.b	#6,$24(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.l	#$1542C,4(a1)
		move.w	#$24E0,2(a1)
		or.b	#4,1(a1)
		move.b	#3,$18(a1)
		move.b	#$E5,$20(a1)
		move.b	#2,$1C(a1)
		move.w	#$C,d0
		move.w	#$10,d1
		move.w	#$FD00,d2
		btst	#0,$22(a0)
		beq.s	_ok$deba
		neg.w	d1
		neg.w	d2

_ok$deba:				; CODE XREF: chkshot+68j
		sub.w	d0,$C(a1)
		sub.w	d1,8(a1)
		move.w	d2,$10(a1)

_worknai$deba:				; CODE XREF: chkshot+16j
		rts
; End of function chkshot


; =============== S U B	R O U T	I N E =======================================


chkatkdone:				; CODE XREF: ROM:0000016Ap
		move.w	$C(a0),d0
		cmp.w	($FFFFF646).w,d0
		blt.s	_end$eeba
		move.b	#2,$25(a0)
		move.b	#0,$1C(a0)
		move.w	$30(a0),$2E(a0)
		move.w	#$40,$12(a0) ; '@'
		sf	$2D(a0)

_end$eeba:				; CODE XREF: chkatkdone+8j
		rts
; End of function chkatkdone


; =============== S U B	R O U T	I N E =======================================


chkatack:				; CODE XREF: ROM:0000014Ap
		tst.b	$2C(a0)
		beq.s	_end$feba
		move.w	($FFFFB008).w,d0
		move.w	($FFFFB00C).w,d1
		sub.w	$C(a0),d1
		bpl.s	_end$feba
		cmp.w	#$FFD0,d1
		blt.s	_end$feba
		sub.w	8(a0),d0
		cmp.w	#$48,d0	; 'H'
		bgt.s	_end$feba
		cmp.w	#$FFB8,d0
		blt.s	_end$feba
		tst.w	d0
		bpl.s	_toright$feba

_toleft$feba:
		cmp.w	#$FFD8,d0
		bgt.s	_end$feba
		btst	#0,$22(a0)
		bne.s	_end$feba
		bra.s	_edge$feba
; ---------------------------------------------------------------------------

_toright$feba:				; CODE XREF: chkatack+2Cj
		cmp.w	#$28,d0	; '('
		blt.s	_end$feba
		btst	#0,$22(a0)
		beq.s	_end$feba

_edge$feba:				; CODE XREF: chkatack+3Cj
		moveq	#$20,d0	; ' '
		cmp.w	$32(a0),d0
		bgt.s	_end$feba
		move.b	#4,$25(a0)
		move.b	#1,$1C(a0)
		move.w	#$FC00,$12(a0)

_end$feba:				; CODE XREF: chkatack+4j chkatack+12j	...
		rts
; End of function chkatack


; =============== S U B	R O U T	I N E =======================================


chkfloat:				; CODE XREF: ROM:00000146p
		subq.w	#1,$2E(a0)
		bne.s	_end$geba
		move.w	$30(a0),$2E(a0)
		addq.b	#2,$25(a0)
		move.w	#$FFC0,d0
		tst.b	$2C(a0)
		beq.s	_vel$geba
		neg.w	d0

_vel$geba:				; CODE XREF: chkfloat+18j
		move.w	d0,$12(a0)

_end$geba:				; CODE XREF: chkfloat+4j
		rts
; End of function chkfloat


; =============== S U B	R O U T	I N E =======================================


chkfltdone:				; CODE XREF: ROM:00000158p
		move.w	$C(a0),d0
		tst.b	$2C(a0)
		bne.s	_down$heba
		cmp.w	($FFFFF646).w,d0
		bgt.s	_end$heba
		subq.b	#2,$25(a0)
		st	$2C(a0)
		clr.w	$12(a0)

_end$heba:				; CODE XREF: chkfltdone+Ej
					; chkfltdone+22j
		rts
; ---------------------------------------------------------------------------

_down$heba:				; CODE XREF: chkfltdone+8j
		cmp.w	$2A(a0),d0
		blt.s	_end$heba
		subq.b	#2,$25(a0)
		sf	$2C(a0)
		clr.w	$12(a0)
		rts
; End of function chkfltdone


; =============== S U B	R O U T	I N E =======================================


fixwings:				; CODE XREF: ROM:000000F0p
		moveq	#$A,d0
		moveq	#$FFFFFFFA,d1
		move.l	$36(a0),a1
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.b	$22(a0),$22(a1)
		move.b	$23(a0),$23(a1)
		move.b	1(a0),1(a1)
		btst	#0,$22(a1)
		beq.s	_normal$ieba
		neg.w	d0

_normal$ieba:				; CODE XREF: fixwings+2Cj
		add.w	d0,8(a1)
		add.w	d1,$C(a1)
		rts
; End of function fixwings


; =============== S U B	R O U T	I N E =======================================


shotdrops:				; DATA XREF: ROM:00000016o
					; ROM:00000632o
		bsr.w	$878		; XREF:	speedset
		bsr.w	hitground
		lea	($153F4).l,a1
		bsr.w	$872		; XREF:	patchg
		bra.w	$86C		; XREF:	frameoutchk
; End of function shotdrops


; =============== S U B	R O U T	I N E =======================================


hitground:				; CODE XREF: shotdrops+4p
		jsr	$128C6		; XREF:	emycol_d
		tst.w	d1
		bpl.s	_end$keba
		add.w	d1,$C(a0)
		move.w	$12(a0),d0
		asr.w	#1,d0
		neg.w	d0
		move.w	d0,$12(a0)

_end$keba:				; CODE XREF: hitground+8j
		sub.b	#1,$21(a0)
		beq.w	$866		; XREF:	frameout
		rts
; End of function hitground


; =============== S U B	R O U T	I N E =======================================


oilslip:				; DATA XREF: ROM:00000018o
					; ROM:00000634o
		bsr.w	landedyet

updatoil:
		tst.b	$25(a0)
		beq.s	_end$oeba
		sub.w	#1,$2C(a0)
		beq.w	$866		; XREF:	frameout
		move.w	($FFFFB008).w,8(a0)
		move.w	($FFFFB00C).w,$C(a0)
		add.w	#$C,$C(a0)
		sub.b	#1,$2A(a0)
		bne.s	_done$oeba
		move.b	#3,$2A(a0)
		bchg	#0,$22(a0)
		bchg	#0,1(a0)

_end$oeba:				; CODE XREF: oilslip+8j
		rts
; ---------------------------------------------------------------------------

_done$oeba:				; CODE XREF: oilslip+2Cj
		lea	($153F4).l,a1
		bsr.w	$872		; XREF:	patchg
		bra.w	$860		; XREF:	actionsub
; End of function oilslip


; =============== S U B	R O U T	I N E =======================================


landedyet:				; CODE XREF: oilslipp
		tst.b	$25(a0)
		bne.s	_end$peba
		move.b	($FFFFB024).w,d0
		cmp.b	#2,d0
		bne.s	_end$peba
		move.w	($FFFFB008).w,8(a0)
		move.w	($FFFFB00C).w,$C(a0)
		or.b	#4,1(a0)
		move.b	#1,$18(a0)
		move.b	#5,$1C(a0)
		st	$25(a0)
		move.w	#$12C,$2C(a0)
		move.b	#3,$2A(a0)

_end$peba:				; CODE XREF: landedyet+4j landedyet+Ej
		rts
; End of function landedyet


; =============== S U B	R O U T	I N E =======================================


chkflip:				; CODE XREF: ROM:00000142p
					; ROM:00000154p ...
		subq.w	#1,$32(a0)
		bpl.s	_jump$qeba
		move.w	$34(a0),$32(a0)
		neg.w	$10(a0)
		bchg	#0,$22(a0)
		move.b	#1,$1D(a0)

_jump$qeba:				; CODE XREF: chkflip+4j
		rts
; End of function chkflip


; =============== S U B	R O U T	I N E =======================================


chkhit:					; CODE XREF: ROM:seahorseshotp
					; ROM:skyhorseshotp
		tst.b	$21(a0)
		beq.w	_end$reba
		moveq	#2,d3

_loop$reba:				; CODE XREF: chkhit:_worknai$rebaj
		bsr.w	$FFFF8B46	; XREF:	actwkchk
		bne.s	_worknai$reba
		move.b	0(a0),0(a1)
		move.b	#8,$24(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.l	4(a0),4(a1)
		move.w	#$24E0,2(a1)
		or.b	#4,1(a1)
		move.b	#3,$18(a1)
		move.w	#$FF00,$12(a1)
		move.b	#4,$1C(a1)
		move.b	#$78,$21(a1) ; 'x'
		cmp.w	#1,d3
		beq.s	_r1$reba
		blt.s	_left$reba
		move.w	#$C0,$10(a1) ; 'À'
		add.w	#-$C0,$12(a1)
		bra.s	_worknai$reba
; ---------------------------------------------------------------------------

_left$reba:				; CODE XREF: chkhit+58j
		move.w	#$FF00,$10(a1)
		add.w	#-$40,$12(a1)
		bra.s	_worknai$reba
; ---------------------------------------------------------------------------

_r1$reba:				; CODE XREF: chkhit+56j
		move.w	#$40,$10(a1) ; '@'

_worknai$reba:				; CODE XREF: chkhit+Ej	chkhit+66j ...
		dbf	d3,_loop$reba
		bsr.w	$FFFF8B46	; XREF:	actwkchk
		bne.s	_out$reba
		move.b	0(a0),0(a1)
		move.b	#$A,$24(a1)
		move.l	4(a0),4(a1)
		move.w	#$24E0,2(a1)

_out$reba:				; CODE XREF: chkhit+84j
		bra.w	$866		; XREF:	frameout
; ---------------------------------------------------------------------------

_end$reba:				; CODE XREF: chkhit+4j
		rts
; End of function chkhit

; ---------------------------------------------------------------------------
horsechg:	dc.w seahorsechg0-horsechg ; DATA XREF:	ROM:horsechgo
					; ROM:0000049Ao ...
		dc.w seahorsechg1-horsechg
		dc.w horsechg2-horsechg
		dc.w seahorsechg3-horsechg
		dc.w seahorsechg4-horsechg
		dc.w seahorsechg5-horsechg
		dc.w skyhorsechg0-horsechg
		dc.w skyhorsechg1-horsechg
seahorsechg0:	dc.b  $E,  0,$FF	; 0 ; DATA XREF: ROM:horsechgo
seahorsechg1:	dc.b   5,  3,  4,  3	; 0 ; DATA XREF: ROM:0000049Ao
		dc.b   4,  3,  4,$FF	; 4
horsechg2:	dc.b   3,  5,  6,  7	; 0 ; DATA XREF: ROM:0000049Co
		dc.b   6,$FF		; 4
seahorsechg3:	dc.b   3,  1,  2,$FF	; 0 ; DATA XREF: ROM:0000049Eo
seahorsechg4:	dc.b   1,  5,$FF	; 0 ; DATA XREF: ROM:000004A0o
seahorsechg5:	dc.b  $E,  8,$FF	; 0 ; DATA XREF: ROM:000004A2o
skyhorsechg0:	dc.b   1,  9, $A,$FF	; 0 ; DATA XREF: ROM:000004A4o
skyhorsechg1:	dc.b   5, $B, $C, $B	; 0 ; DATA XREF: ROM:000004A6o
		dc.b  $C, $B, $C,$FF	; 4
		dc.b   0		; 8
horsepat:	dc.w seahorsesp00-horsepat ; DATA XREF:	ROM:horsepato
					; ROM:000004D2o ...
		dc.w seahorsesp01-horsepat
		dc.w seahorsesp02-horsepat
		dc.w seahorsesp03-horsepat
		dc.w seahorsesp04-horsepat
		dc.w horsesp05-horsepat
		dc.w horsesp06-horsepat
		dc.w horsesp07-horsepat
		dc.w horsesp08-horsepat
		dc.w skyhorsesp00-horsepat
		dc.w skyhorsesp01-horsepat
		dc.w skyhorsesp02-horsepat
		dc.w skyhorsesp03-horsepat
seahorsesp00:	dc.w 3			; DATA XREF: ROM:horsepato
		dc.w $E80D,    0,    0,$FFF0; 0
		dc.w $F809,  $16,   $B,$FFF8; 4
		dc.w  $805,  $24,  $12,$FFF8; 8
seahorsesp01:	dc.w 1			; DATA XREF: ROM:000004D2o
		dc.w $F805,  $28,  $14,$FFF8; 0
seahorsesp02:	dc.w 1			; DATA XREF: ROM:000004D4o
		dc.w $F805,  $2C,  $16,$FFF8; 0
seahorsesp03:	dc.w 4			; DATA XREF: ROM:000004D6o
		dc.w $E809,    8,    4,$FFF0; 0
		dc.w $E801,   $E,    7,	   8; 4
		dc.w $F809,  $16,   $B,$FFF8; 8
		dc.w  $805,  $24,  $12,$FFF8; 12
seahorsesp04:	dc.w 4			; DATA XREF: ROM:000004D8o
		dc.w $E809,  $10,    8,$FFF0; 0
		dc.w $E801,   $E,    7,	   8; 4
		dc.w $F809,  $16,   $B,$FFF8; 8
		dc.w  $805,  $24,  $12,$FFF8; 12
horsesp05:	dc.w 1			; DATA XREF: ROM:000004DAo
		dc.w $F801,  $30,  $18,$FFFC; 0
horsesp06:	dc.w 1			; DATA XREF: ROM:000004DCo
		dc.w $F801,  $32,  $19,$FFFC; 0
horsesp07:	dc.w 1			; DATA XREF: ROM:000004DEo
		dc.w $F801,  $34,  $1A,$FFFC; 0
horsesp08:	dc.w 1			; DATA XREF: ROM:000004E0o
		dc.w $F80D,  $36,  $1B,$FFF0; 0
skyhorsesp00:	dc.w 4			; DATA XREF: ROM:000004E2o
		dc.w $E80D,    0,    0,$FFF0; 0
		dc.w $F805,  $1C,   $E,$FFF8; 4
		dc.w $F801,  $20,  $10,	   8; 8
		dc.w  $805,  $24,  $12,$FFF8; 12
skyhorsesp01:	dc.w 4			; DATA XREF: ROM:000004E4o
		dc.w $E80D,    0,    0,$FFF0; 0
		dc.w $F805,  $1C,   $E,$FFF8; 4
		dc.w $F801,  $22,  $11,	   8; 8
		dc.w  $805,  $24,  $12,$FFF8; 12
skyhorsesp02:	dc.w 5			; DATA XREF: ROM:000004E6o
		dc.w $E809,    8,    4,$FFF0; 0
		dc.w $E801,   $E,    7,	   8; 4
		dc.w $F805,  $1C,   $E,$FFF8; 8
		dc.w $F801,  $20,  $10,	   8; 12
		dc.w  $805,  $24,  $12,$FFF8; 16
skyhorsesp03:	dc.w 5			; DATA XREF: ROM:000004E8o
		dc.w $E809,  $10,    8,$FFF0; 0
		dc.w $E801,   $E,    7,	   8; 4
		dc.w $F805,  $1C,   $E,$FFF8; 8
		dc.w $F801,  $22,  $11,	   8; 12
		dc.w  $805,  $24,  $12,$FFF8; 16
; ---------------------------------------------------------------------------

skyhorse:
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	skyhorse_move_tbl(pc,d0.w),d1
		jmp	skyhorse_move_tbl(pc,d1.w)
; ---------------------------------------------------------------------------
skyhorse_move_tbl:dc.w skyhorseinit-skyhorse_move_tbl ;	DATA XREF: ROM:skyhorse_move_tblo
					; ROM:0000062Co ...
		dc.w skyhorsemove-skyhorse_move_tbl
		dc.w skyhorseshot-skyhorse_move_tbl
		dc.w 0
		dc.w shotdrops-skyhorse_move_tbl
		dc.w oilslip-skyhorse_move_tbl
; ---------------------------------------------------------------------------

skyhorseinit:				; DATA XREF: ROM:skyhorse_move_tblo
		addq.b	#2,$24(a0)
		move.l	#$1542C,4(a0)
		move.w	#$2570,2(a0)
		or.b	#4,1(a0)
		move.b	#$A,$20(a0)
		move.b	#4,$18(a0)
		move.b	#$10,$19(a0)
		move.b	#6,$1C(a0)
		move.b	$28(a0),d0
		and.w	#$F,d0
		move.w	d0,d1
		lsl.w	#5,d1
		subq.w	#1,d1
		move.w	d1,$32(a0)
		move.w	d1,$34(a0)
		move.w	$C(a0),$2A(a0)
		move.w	$C(a0),$2E(a0)
		add.w	#$60,$2E(a0) ; '`'
		move.w	#$FF00,$10(a0)

skyhorsemove:				; DATA XREF: ROM:0000062Co
		lea	horsechg,a1
		bsr.w	$872		; XREF:	patchg
		move.w	#$39C,($FFFFF646).w
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	skyhorsemove_tbl(pc,d0.w),d1
		jsr	skyhorsemove_tbl(pc,d1.w)
		bra.w	$86C		; XREF:	frameoutchk
; ---------------------------------------------------------------------------
skyhorsemove_tbl:dc.w skyhorsefly-skyhorsemove_tbl ; DATA XREF:	ROM:skyhorsemove_tblo
					; ROM:000006B6o
		dc.w skyhorseattack-skyhorsemove_tbl
; ---------------------------------------------------------------------------

skyhorseshot:				; DATA XREF: ROM:0000062Eo
		bsr.w	chkhit
		bsr.w	$87E		; XREF:	speedset2
		lea	horsechg,a1
		bsr.w	$872		; XREF:	patchg
		bra.w	$86C		; XREF:	frameoutchk
; ---------------------------------------------------------------------------

skyhorsefly:				; DATA XREF: ROM:skyhorsemove_tblo
		bsr.w	$87E		; XREF:	speedset2
		bsr.w	chkflip
		bsr.w	getposition
		bsr.w	seeksonic
		bsr.w	chkshoot
		rts
; ---------------------------------------------------------------------------

skyhorseattack:				; DATA XREF: ROM:000006B6o
		bsr.w	$87E		; XREF:	speedset2
		bsr.w	chkflip
		bsr.w	getposition
		bsr.w	seeksonic
		bsr.w	shotstatus
		rts

; =============== S U B	R O U T	I N E =======================================


shotstatus:				; CODE XREF: ROM:000006F2p

; FUNCTION CHUNK AT 00000796 SIZE 0000006A BYTES

		subq.w	#1,$30(a0)
		beq.s	_done$bgba
		move.w	$30(a0),d0
		cmp.w	#$12,d0
		beq.w	makeshot
		rts
; ---------------------------------------------------------------------------

_done$bgba:				; CODE XREF: shotstatus+4j
		subq.b	#2,$25(a0)
		move.b	#6,$1C(a0)
		move.w	#$B4,$30(a0) ; '´'
		rts
; End of function shotstatus


; =============== S U B	R O U T	I N E =======================================


getposition:				; CODE XREF: ROM:000006D4p
					; ROM:000006EAp
		sf	$2D(a0)
		sf	$2C(a0)
		sf	$36(a0)
		move.w	($FFFFB008).w,d0
		sub.w	8(a0),d0
		bpl.s	_toleft$cgba
		btst	#0,$22(a0)
		bne.s	_setbehind$cgba
		bra.s	_next$cgba
; ---------------------------------------------------------------------------

_toleft$cgba:				; CODE XREF: getposition+14j
		btst	#0,$22(a0)
		bne.s	_next$cgba

_setbehind$cgba:			; CODE XREF: getposition+1Cj
		st	$2C(a0)

_next$cgba:				; CODE XREF: getposition+1Ej
					; getposition+26j
		move.w	($FFFFB00C).w,d0
		sub.w	$C(a0),d0
		cmp.w	#$FFFC,d0
		blt.s	_out$cgba
		cmp.w	#4,d0
		bgt.s	_above$cgba
		st	$2D(a0)
		move.w	#0,$12(a0)
		rts
; ---------------------------------------------------------------------------

_above$cgba:				; CODE XREF: getposition+3Ej
		st	$36(a0)

_out$cgba:				; CODE XREF: getposition+38j
		rts
; End of function getposition


; =============== S U B	R O U T	I N E =======================================


chkshoot:				; CODE XREF: ROM:000006DCp
		tst.b	$2C(a0)
		bne.s	_end$dgba
		subq.w	#1,$30(a0)
		bgt.s	_end$dgba
		tst.b	$2D(a0)
		beq.s	_end$dgba
		move.b	#7,$1C(a0)
		move.w	#$24,$30(a0) ; '$'
		add.b	#2,$25(a0)

_end$dgba:				; CODE XREF: chkshoot+4j chkshoot+Aj ...
		rts
; End of function chkshoot

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR shotstatus

makeshot:				; CODE XREF: shotstatus+Ej
		bsr.w	$FFFF8B46	; XREF:	actwkchk
		bne.s	_worknai$egba
		move.b	#$51,0(a1) ; 'Q'
		move.b	#4,$24(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.l	#$1542C,4(a1)
		move.w	#$24E0,2(a1)
		or.b	#4,1(a1)
		move.b	#3,$18(a1)
		move.b	#2,$1C(a1)
		move.b	#$E5,$20(a1)
		move.w	#$C,d0
		move.w	#$10,d1
		move.w	#$FD00,d2
		btst	#0,$22(a0)
		beq.s	_ok$egba
		neg.w	d1
		neg.w	d2

_ok$egba:				; CODE XREF: shotstatus+F4j
		sub.w	d0,$C(a1)
		sub.w	d1,8(a1)
		move.w	d2,$10(a1)

_worknai$egba:				; CODE XREF: shotstatus+A2j
		rts
; END OF FUNCTION CHUNK	FOR shotstatus

; =============== S U B	R O U T	I N E =======================================


seeksonic:				; CODE XREF: ROM:000006D8p
					; ROM:000006EEp
		tst.b	$2D(a0)
		bne.s	_out$fgba
		tst.b	$36(a0)
		beq.s	_below$fgba

_above$fgba:
		move.w	$2E(a0),d0
		cmp.w	$C(a0),d0
		ble.s	_end$fgba
		tst.b	$2C(a0)
		beq.s	_speed$fgba
		move.w	$2A(a0),d0
		cmp.w	$C(a0),d0
		bge.s	_end$fgba
		rts
; ---------------------------------------------------------------------------

_speed$fgba:				; CODE XREF: seeksonic+1Aj
		move.w	#$180,$12(a0)
		rts
; ---------------------------------------------------------------------------

_below$fgba:				; CODE XREF: seeksonic+Aj
		move.w	$2A(a0),d0
		cmp.w	$C(a0),d0
		bge.s	_end$fgba
		tst.b	$2C(a0)
		beq.s	_negspeed$fgba
		move.w	$2E(a0),d0
		cmp.w	$C(a0),d0
		ble.s	_end$fgba
		rts
; ---------------------------------------------------------------------------

_negspeed$fgba:				; CODE XREF: seeksonic+3Ej
		move.w	#$FE80,$12(a0)
		rts
; ---------------------------------------------------------------------------

_end$fgba:				; CODE XREF: seeksonic+14j
					; seeksonic+24j ...
		move.w	d0,$C(a0)
		move.w	#0,$12(a0)

_out$fgba:				; CODE XREF: seeksonic+4j
		rts
; End of function seeksonic

; end of 'ROM'


		END
