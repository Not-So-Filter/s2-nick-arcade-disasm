

;
; +-------------------------------------------------------------------------+
; |	This file is generated by The Interactive Disassembler (IDA)	    |
; |	Copyright (c) 2007 by DataRescue sa/nv,	<ida@datarescue.com>	    |
; |	    Licensed to: GVU, Gerhard Uphoff, 1	user, adv, 10/2007	    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	F220AC331D87E05E290316BF65BBC84C

; ---------------------------------------------------------------------------
; File Name   :	Z:\emu\gen\s2a\sym\copies\code_57644
; Format      :	Binary file
; Base Address:	0000h Range: 0000h - 0474h Loaded length: 0474h

; Processor:	    68000
; Target Assembler: 680x0 Assembler in MRI compatible mode
; This file should be compiled with "as	-M"

; ===========================================================================

; Segment type:	Pure code
; segment "ROM"

bbat:
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	bat_move_tbl(pc,d0.w),d1
		jmp	bat_move_tbl(pc,d1.w)
; ---------------------------------------------------------------------------
bat_move_tbl:	dc.w batinit-bat_move_tbl ; DATA XREF: ROM:bat_move_tblo
					; ROM:00000010o ...
		dc.w batmove-bat_move_tbl
		dc.w batattack-bat_move_tbl
; ---------------------------------------------------------------------------

batinit:				; DATA XREF: ROM:bat_move_tblo
		move.l	#$16016,4(a0)
		move.w	#$2530,2(a0)
		or.b	#4,1(a0)
		move.b	#$A,$20(a0)
		move.b	#4,$18(a0)
		move.b	#$10,$19(a0)
		move.b	#$10,$16(a0)
		move.b	#8,$17(a0)
		addq.b	#2,$24(a0)
		move.w	$C(a0),$2E(a0)
		rts
; ---------------------------------------------------------------------------

batmove:				; DATA XREF: ROM:00000010o
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	batmove_tbl(pc,d0.w),d1
		jsr	batmove_tbl(pc,d1.w)
		bsr.w	setposi
		lea	($15FE2).l,a1
		bsr.w	$47A		; XREF:	patchg
		bra.w	$474		; XREF:	frameoutchk
; ---------------------------------------------------------------------------
batmove_tbl:	dc.w bathover-batmove_tbl ; DATA XREF: ROM:batmove_tblo
					; ROM:00000074o ...
		dc.w batflap-batmove_tbl
		dc.w batseek-batmove_tbl

; =============== S U B	R O U T	I N E =======================================


setposi:				; CODE XREF: ROM:00000060p
		move.b	$3F(a0),d0
		jsr	($2B16).l	; XREF:	sinset
		asr.w	#6,d0
		add.w	$2E(a0),d0
		move.w	d0,$C(a0)
		addq.b	#4,$3F(a0)
		rts
; End of function setposi


; =============== S U B	R O U T	I N E =======================================


seekchk:				; CODE XREF: ROM:000001E6p
		move.w	8(a0),d0
		sub.w	($FFFFB008).w,d0
		cmp.w	#$80,d0	; '€'
		bgt.s	_end$xdba
		cmp.w	#$FF80,d0
		blt.s	_end$xdba
		move.b	#4,$25(a0)
		move.b	#2,$1C(a0)
		move.w	#8,$2A(a0)
		move.b	#0,$3E(a0)

_end$xdba:				; CODE XREF: seekchk+Cj seekchk+12j
		rts
; End of function seekchk

; ---------------------------------------------------------------------------

batattack:				; DATA XREF: ROM:00000012o
		bsr.w	moveset
		bsr.w	direcchg
		bsr.w	fixme
		bsr.w	$480		; XREF:	speedset2
		lea	($15FE2).l,a1
		bsr.w	$47A		; XREF:	patchg
		bra.w	$474		; XREF:	frameoutchk
; ---------------------------------------------------------------------------
		rts

; =============== S U B	R O U T	I N E =======================================


fixme:					; CODE XREF: ROM:000000C8p
		tst.b	$3D(a0)
		beq.s	_end$zdba
		bset	#0,1(a0)
		bset	#0,$22(a0)

_end$zdba:				; CODE XREF: fixme+4j
		rts
; End of function fixme


; =============== S U B	R O U T	I N E =======================================


attackchk:				; CODE XREF: ROM:batseekp
		sub.w	#1,$2C(a0)
		bpl.s	_end$aeba
		move.w	8(a0),d0
		sub.w	($FFFFB008).w,d0
		cmp.w	#$60,d0	; '`'
		bgt.s	_gone$aeba
		cmp.w	#$FFA0,d0
		blt.s	_gone$aeba
		tst.w	d0
		bpl.s	_cnt$aeba
		st	$3D(a0)

_cnt$aeba:				; CODE XREF: attackchk+1Ej
		move.b	#$40,$3F(a0) ; '@'
		move.w	#$400,$14(a0)
		move.b	#4,$24(a0)
		move.b	#3,$1C(a0)
		move.w	#$C,$2A(a0)
		move.b	#1,$3E(a0)
		moveq	#0,d0

_end$aeba:				; CODE XREF: attackchk+6j
					; attackchk+56j
		rts
; ---------------------------------------------------------------------------

_gone$aeba:				; CODE XREF: attackchk+14j
					; attackchk+1Aj
		cmp.w	#$80,d0	; '€'
		bgt.s	_norm$aeba
		cmp.w	#$FF80,d0
		bgt.s	_end$aeba

_norm$aeba:				; CODE XREF: attackchk+50j
		move.b	#1,$1C(a0)
		move.b	#0,$25(a0)
		move.w	#$18,$2A(a0)
		rts
; End of function attackchk


; =============== S U B	R O U T	I N E =======================================


direcchg:				; CODE XREF: ROM:000000C4p
		tst.b	$3D(a0)
		bne.s	_rt$beba
		moveq	#0,d0
		move.b	$3F(a0),d0
		cmp.w	#$C0,d0	; 'À'
		bge.s	_done$beba
		addq.b	#2,d0
		move.b	d0,$3F(a0)

_end$beba:
		rts
; ---------------------------------------------------------------------------

_rt$beba:				; CODE XREF: direcchg+4j
		moveq	#0,d0
		move.b	$3F(a0),d0
		cmp.w	#$C0,d0	; 'À'
		beq.s	_done$beba
		subq.b	#2,d0
		move.b	d0,$3F(a0)
		rts
; ---------------------------------------------------------------------------

_done$beba:				; CODE XREF: direcchg+10j direcchg+24j
		sf	$3D(a0)
		move.b	#0,$1C(a0)
		move.b	#2,$24(a0)
		move.b	#0,$25(a0)
		move.w	#$18,$2A(a0)
		move.b	#1,$1C(a0)
		bclr	#0,1(a0)
		bclr	#0,$22(a0)
		rts
; End of function direcchg


; =============== S U B	R O U T	I N E =======================================


moveset:				; CODE XREF: ROM:batattackp
		move.b	$3F(a0),d0
		jsr	($2B16).l	; XREF:	sinset
		muls.w	$14(a0),d1
		asr.l	#8,d1
		move.w	d1,$10(a0)
		muls.w	$14(a0),d0
		asr.l	#8,d0
		move.w	d0,$12(a0)
		rts
; End of function moveset

; ---------------------------------------------------------------------------

bathover:				; DATA XREF: ROM:batmove_tblo
		sub.w	#1,$2A(a0)
		bpl.s	_end$deba
		bsr.w	seekchk
		beq.s	_end$deba
		jsr	($2AF0).l	; XREF:	random
		and.b	#$FF,d0
		bne.s	_end$deba
		move.w	#$18,$2A(a0)
		move.w	#$1E,$2C(a0)
		addq.b	#2,$25(a0)
		move.b	#1,$1C(a0)
		move.b	#0,$3E(a0)

_end$deba:				; CODE XREF: ROM:000001E4j
					; ROM:000001EAj ...
		rts
; ---------------------------------------------------------------------------

batflap:				; DATA XREF: ROM:00000074o
		subq.b	#1,$2A(a0)
		bpl.s	_end$eeba
		subq.b	#2,$25(a0)

_end$eeba:				; CODE XREF: ROM:0000021Aj
		rts
; ---------------------------------------------------------------------------

batseek:				; DATA XREF: ROM:00000076o
		bsr.w	attackchk
		beq.s	_cnt$feba
		sub.w	#1,$2A(a0)
		bne.s	_cnt$feba
		move.b	$3E(a0),d0
		beq.s	_here$feba
		move.b	#0,$3E(a0)
		move.w	#8,$2A(a0)
		bset	#0,1(a0)
		bset	#0,$22(a0)
		rts
; ---------------------------------------------------------------------------

_here$feba:				; CODE XREF: ROM:00000234j
		move.b	#1,$3E(a0)
		move.w	#$C,$2A(a0)
		bclr	#0,1(a0)
		bclr	#0,$22(a0)

_cnt$feba:				; CODE XREF: ROM:00000226j
					; ROM:0000022Ej
		rts
; ---------------------------------------------------------------------------
batchg:		dc.w batchg00-batchg	; DATA XREF: ROM:batchgo ROM:0000026Co ...
		dc.w batchg01-batchg
		dc.w batchg02-batchg
		dc.w batchg03-batchg
batchg00:	dc.b   1,  0,  5,$FF	; 0 ; DATA XREF: ROM:batchgo
batchg01:	dc.b   1,  1,  6,  1	; 0 ; DATA XREF: ROM:0000026Co
		dc.b   6,  2,  7,  2	; 4
		dc.b   7,  1,  6,  1	; 8
		dc.b   6,$FD,  0	; 12
batchg02:	dc.b   1,  1,  6,  1	; 0 ; DATA XREF: ROM:0000026Eo
		dc.b   6,  2,  7,  3	; 4
		dc.b   8,  4,  9,  4	; 8
		dc.b   9,  3,  8,$FE	; 12
		dc.b  $A		; 16
batchg03:	dc.b   3, $A, $B, $C	; 0 ; DATA XREF: ROM:00000270o
		dc.b  $D, $E,$FF,  0	; 4
bbatpat:	dc.w batsp00-bbatpat	; DATA XREF: ROM:bbatpato
					; ROM:000002A0o ...
		dc.w batsp01-bbatpat
		dc.w batsp02-bbatpat
		dc.w batsp03-bbatpat
		dc.w batsp04-bbatpat
		dc.w batsp05-bbatpat
		dc.w batsp06-bbatpat
		dc.w batsp07-bbatpat
		dc.w batsp08-bbatpat
		dc.w batsp09-bbatpat
		dc.w batsp10-bbatpat
		dc.w batsp11-bbatpat
		dc.w batsp12-bbatpat
		dc.w batsp13-bbatpat
		dc.w batsp14-bbatpat
batsp00:	dc.w 4			; DATA XREF: ROM:bbatpato
		dc.w $F005,    0,    0,$FFF8; 0
		dc.w	 5,    4,    2,$FFF8; 4
		dc.w $F00B,    8,    4,	   5; 8
		dc.w $F00B, $808, $804,$FFE3; 12
batsp01:	dc.w 4			; DATA XREF: ROM:000002A0o
		dc.w $F005,    0,    0,$FFF8; 0
		dc.w	 5,    4,    2,$FFF8; 4
		dc.w $F60D,  $14,   $A,	   5; 8
		dc.w $F60D, $814, $80A,$FFDB; 12
batsp02:	dc.w 4			; DATA XREF: ROM:000002A2o
		dc.w $F005,    0,    0,$FFF8; 0
		dc.w	 5,    4,    2,$FFF8; 4
		dc.w $F80D,  $1C,   $E,	   4; 8
		dc.w $F80D, $81C, $80E,$FFDC; 12
batsp03:	dc.w 4			; DATA XREF: ROM:000002A4o
		dc.w $F005,    0,    0,$FFF8; 0
		dc.w	 5,    4,    2,$FFF8; 4
		dc.w $F805,  $24,  $12,$FFEC; 8
		dc.w $F805,  $28,  $14,	   4; 12
batsp04:	dc.w 3			; DATA XREF: ROM:000002A6o
		dc.w $F801,  $2C,  $16,	   0; 0
		dc.w $F005,    0,    0,$FFF8; 4
		dc.w	 5,    4,    2,$FFF8; 8
batsp05:	dc.w 4			; DATA XREF: ROM:000002A8o
		dc.w $F005,    0,    0,$FFF8; 0
		dc.w	 5,  $2E,  $17,$FFF8; 4
		dc.w $F00B,    8,    4,	   5; 8
		dc.w $F00B, $808, $804,$FFE3; 12
batsp06:	dc.w 4			; DATA XREF: ROM:000002AAo
		dc.w $F005,    0,    0,$FFF8; 0
		dc.w	 5,  $2E,  $17,$FFF8; 4
		dc.w $F60D,  $14,   $A,	   5; 8
		dc.w $F60D, $814, $80A,$FFDB; 12
batsp07:	dc.w 4			; DATA XREF: ROM:000002ACo
		dc.w $F005,    0,    0,$FFF8; 0
		dc.w	 5,  $2E,  $17,$FFF8; 4
		dc.w $F80D,  $1C,   $E,	   4; 8
		dc.w $F80D, $81C, $80E,$FFDC; 12
batsp08:	dc.w 4			; DATA XREF: ROM:000002AEo
		dc.w $F005,    0,    0,$FFF8; 0
		dc.w	 5,  $2E,  $17,$FFF8; 4
		dc.w $F805,  $28,  $14,	   4; 8
		dc.w $F805,  $24,  $12,$FFEC; 12
batsp09:	dc.w 3			; DATA XREF: ROM:000002B0o
		dc.w $F801,  $2C,  $16,	   0; 0
		dc.w $F005,    0,    0,$FFF8; 4
		dc.w	 5,  $2E,  $17,$FFF8; 8
batsp10:	dc.w 3			; DATA XREF: ROM:000002B2o
		dc.w $F007,  $32,  $19,$FFF8; 0
		dc.w $F80D,  $1C,   $E,	   4; 4
		dc.w $F80D, $81C, $80E,$FFDC; 8
batsp11:	dc.w 3			; DATA XREF: ROM:000002B4o
		dc.w $F007,  $32,  $19,$FFF8; 0
		dc.w $F805,  $28,  $14,	   4; 4
		dc.w $F805,  $24,  $12,$FFEC; 8
batsp12:	dc.w 2			; DATA XREF: ROM:000002B6o
		dc.w $F801,  $2C,  $16,	   0; 0
		dc.w $F007,  $32,  $19,$FFF8; 4
batsp13:	dc.w 2			; DATA XREF: ROM:000002B8o
		dc.w $F801, $82C, $816,$FFF8; 0
		dc.w $F007,  $32,  $19,$FFF8; 4
batsp14:	dc.w 3			; DATA XREF: ROM:000002BAo
		dc.w $F007,  $32,  $19,$FFF8; 0
		dc.w $F805, $828, $814,$FFEC; 4
		dc.w $F805, $824, $812,	   4; 8
		dc.w	 0		; 12
; end of 'ROM'


		END
