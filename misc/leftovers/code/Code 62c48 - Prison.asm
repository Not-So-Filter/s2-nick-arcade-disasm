

;
; +-------------------------------------------------------------------------+
; |	This file is generated by The Interactive Disassembler (IDA)	    |
; |	Copyright (c) 2007 by DataRescue sa/nv,	<ida@datarescue.com>	    |
; |	    Licensed to: GVU, Gerhard Uphoff, 1	user, adv, 10/2007	    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	F5AA99F3937677D2BD3BBF9722E69CB2

; ---------------------------------------------------------------------------
; File Name   :	Z:\emu\gen\s2a\sym\copies\code_62c48
; Format      :	Binary file
; Base Address:	0000h Range: 0000h - 0354h Loaded length: 0354h

; Processor:	    68000
; Target Assembler: 680x0 Assembler in MRI compatible mode
; This file should be compiled with "as	-M"

; ===========================================================================

; Segment type:	Pure code
; segment "ROM"

masin:
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	masin_move_tbl(pc,d0.w),d1
		jsr	masin_move_tbl(pc,d1.w)
		move.w	8(a0),d0
		and.w	#$FF80,d0
		sub.w	($FFFFF7DA).w,d0
		cmp.w	#$280,d0
		bhi.s	_frameout$edba
		jmp	$C758		; XREF:	actionsub
; ---------------------------------------------------------------------------

_frameout$edba:				; CODE XREF: ROM:0000001Ej
		jmp	$C88E		; XREF:	frameout
; ---------------------------------------------------------------------------
masin_move_tbl:	dc.w masininit-masin_move_tbl ;	DATA XREF: ROM:masin_move_tblo
					; ROM:0000002Eo ...
		dc.w masinmove-masin_move_tbl
		dc.w masinswitch-masin_move_tbl
		dc.w masinbomb-masin_move_tbl
		dc.w masinbomb-masin_move_tbl
		dc.w masinbomb-masin_move_tbl
		dc.w masinusagi-masin_move_tbl
		dc.w masinclear-masin_move_tbl
masintbl:	dc.b   2,$20,  4,  0	; 0
		dc.b   4, $C,  5,  1	; 4
		dc.b   6,$10,  4,  3	; 8
		dc.b   8,$10,  3,  5	; 12
; ---------------------------------------------------------------------------

masininit:				; DATA XREF: ROM:masin_move_tblo
		move.l	#$186FC,4(a0)
		move.w	#$49D,2(a0)
		bsr.w	$2FC		; XREF:	dualmodesub
		move.b	#4,1(a0)
		move.w	$C(a0),$30(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		lsl.w	#2,d0
		lea	masintbl(pc,d0.w),a1
		move.b	(a1)+,$24(a0)
		move.b	(a1)+,$19(a0)
		move.b	(a1)+,$18(a0)
		move.b	(a1)+,$1A(a0)
		cmp.w	#8,d0
		bne.s	_end$hdba
		move.b	#6,$20(a0)
		move.b	#8,$21(a0)

_end$hdba:				; CODE XREF: ROM:0000008Aj
		rts
; ---------------------------------------------------------------------------

masinmove:				; DATA XREF: ROM:0000002Eo
		cmp.b	#2,($FFFFF7A7).w
		beq.s	_jump$idba
		move.w	#$2B,d1	; '+'
		move.w	#$18,d2
		move.w	#$18,d3
		move.w	8(a0),d4
		jmp	$EB1C		; XREF:	atariridesub
; ---------------------------------------------------------------------------

_jump$idba:				; CODE XREF: ROM:000000A0j
		tst.b	$25(a0)
		beq.s	_jump2$idba
		clr.b	$25(a0)
		bclr	#3,($FFFFB022).w
		bset	#1,($FFFFB022).w

_jump2$idba:				; CODE XREF: ROM:000000BCj
		move.b	#2,$1A(a0)
		rts
; ---------------------------------------------------------------------------

masinswitch:				; DATA XREF: ROM:00000030o
		move.w	#$17,d1
		move.w	#8,d2
		move.w	#8,d3
		move.w	8(a0),d4
		jsr	$EB1C		; XREF:	atariridesub
		lea	($186F4).l,a1
		jsr	$C89C		; XREF:	patchg
		move.w	$30(a0),$C(a0)
		move.b	$22(a0),d0
		and.b	#$18,d0
		beq.s	_jump$jdba
		addq.w	#8,$C(a0)
		move.b	#$A,$24(a0)
		move.w	#$3C,$1E(a0) ; '<'
		clr.b	($FFFFFE1E).w
		clr.b	($FFFFF7AA).w
		move.b	#1,($FFFFF7CC).w
		move.w	#$800,($FFFFF602).w
		clr.b	$25(a0)
		bclr	#3,($FFFFB022).w
		bset	#1,($FFFFB022).w

_jump$jdba:				; CODE XREF: ROM:00000106j
		rts
; ---------------------------------------------------------------------------

masinbomb:				; DATA XREF: ROM:00000032o
					; ROM:00000034o ...
		moveq	#7,d0
		and.b	($FFFFFE0F).w,d0
		bne.s	_worknai$mdba
		jsr	$DAA2		; XREF:	actwkchk
		bne.s	_worknai$mdba
		move.b	#$3F,0(a1) ; '?'
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		jsr	($2AF0).l	; XREF:	random
		moveq	#0,d1
		move.b	d0,d1
		lsr.b	#2,d1
		sub.w	#$20,d1	; ' '
		add.w	d1,8(a1)
		lsr.w	#8,d0
		lsr.b	#3,d0
		add.w	d0,$C(a1)

_worknai$mdba:				; CODE XREF: ROM:00000144j
					; ROM:0000014Cj
		subq.w	#1,$1E(a0)
		beq.s	_bombend$mdba

_end$mdba:
		rts
; ---------------------------------------------------------------------------

_bombend$mdba:				; CODE XREF: ROM:00000180j
		move.b	#2,($FFFFF7A7).w
		move.b	#$C,$24(a0)
		move.b	#6,$1A(a0)
		move.w	#$96,$1E(a0) ; '–'
		add.w	#$20,$C(a0) ; ' '
		moveq	#7,d6
		move.w	#$9A,d5	; 'š'
		moveq	#$FFFFFFE4,d4

_lp$mdba:				; CODE XREF: ROM:000001D0j
		jsr	$DAA2		; XREF:	actwkchk
		bne.s	_no_work_left$mdba
		move.b	#$28,0(a1) ; '('
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		add.w	d4,8(a1)
		addq.w	#7,d4
		move.w	d5,$36(a1)
		subq.w	#8,d5
		dbf	d6,_lp$mdba

_no_work_left$mdba:			; CODE XREF: ROM:000001B0j
		rts
; ---------------------------------------------------------------------------

masinusagi:				; DATA XREF: ROM:00000038o
		moveq	#7,d0
		and.b	($FFFFFE0F).w,d0
		bne.s	_worknai$ndba
		jsr	$DAA2		; XREF:	actwkchk
		bne.s	_worknai$ndba
		move.b	#$28,0(a1) ; '('
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		jsr	($2AF0).l	; XREF:	random
		and.w	#$1F,d0
		subq.w	#6,d0
		tst.w	d1
		bpl.s	_pass$ndba
		neg.w	d0

_pass$ndba:				; CODE XREF: ROM:00000206j
		add.w	d0,8(a1)
		move.w	#$C,$36(a1)

_worknai$ndba:				; CODE XREF: ROM:000001DCj
					; ROM:000001E4j
		subq.w	#1,$1E(a0)
		bne.s	_end$ndba
		addq.b	#2,$24(a0)
		move.w	#$B4,$1E(a0) ; '´'

_end$ndba:				; CODE XREF: ROM:00000218j
		rts
; ---------------------------------------------------------------------------

masinclear:				; DATA XREF: ROM:0000003Ao
		moveq	#$3E,d0	; '>'
		moveq	#$28,d1	; '('
		moveq	#$40,d2	; '@'
		lea	($FFFFB040).w,a1

_lp$odba:				; CODE XREF: ROM:00000236j
		cmp.b	(a1),d1
		beq.s	_end$odba
		add.w	d2,a1
		dbf	d0,_lp$odba
		jsr	$E80A		; XREF:	goleset
		jmp	$C88E		; XREF:	frameout
; ---------------------------------------------------------------------------

_end$odba:				; CODE XREF: ROM:00000232j
		rts
; ---------------------------------------------------------------------------
masinchg:	dc.w masinchg0-masinchg	; DATA XREF: ROM:masinchgo
					; ROM:0000024Ao
		dc.w masinchg0-masinchg
masinchg0:	dc.b   2,  1,  3,$FF	; 0 ; DATA XREF: ROM:masinchgo
					; ROM:0000024Ao
masinpat:	dc.w masinsp0-masinpat	; DATA XREF: ROM:masinpato
					; ROM:00000252o ...
		dc.w masinsp1-masinpat
		dc.w masinsp2-masinpat
		dc.w masinsp3-masinpat
		dc.w masinsp4-masinpat
		dc.w masinsp5-masinpat
		dc.w masinsp6-masinpat
masinsp0:	dc.w 7			; DATA XREF: ROM:masinpato
		dc.w $E00C,$2000,$2000,$FFF0; 0
		dc.w $E80D,$2004,$2002,$FFE0; 4
		dc.w $E80D,$200C,$2006,	   0; 8
		dc.w $F80E,$2014,$200A,$FFE0; 12
		dc.w $F80E,$2020,$2010,	   0; 16
		dc.w $100D,$202C,$2016,$FFE0; 20
		dc.w $100D,$2034,$201A,	   0; 24
masinsp1:	dc.w 1			; DATA XREF: ROM:00000252o
		dc.w $F809,  $3C,  $1E,$FFF4; 0
masinsp2:	dc.w 6			; DATA XREF: ROM:00000254o
		dc.w	 8,$2042,$2021,$FFE0; 0
		dc.w  $80C,$2045,$2022,$FFE0; 4
		dc.w	 4,$2049,$2024,	 $10; 8
		dc.w  $80C,$204B,$2025,	   0; 12
		dc.w $100D,$202C,$2016,$FFE0; 16
		dc.w $100D,$2034,$201A,	   0; 20
masinsp3:	dc.w 1			; DATA XREF: ROM:00000256o
		dc.w $F809,  $4F,  $27,$FFF4; 0
masinsp4:	dc.w 2			; DATA XREF: ROM:00000258o
		dc.w $E80E,$2055,$202A,$FFF0; 0
		dc.w	$E,$2061,$2030,$FFF0; 4
masinsp5:	dc.w 1			; DATA XREF: ROM:0000025Ao
		dc.w $F007,$206D,$2036,$FFF8; 0
masinsp6:	dc.w 0			; DATA XREF: ROM:0000025Co
; end of 'ROM'


		END
