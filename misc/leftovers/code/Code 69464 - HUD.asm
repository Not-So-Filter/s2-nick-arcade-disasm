

;
; +-------------------------------------------------------------------------+
; |	This file is generated by The Interactive Disassembler (IDA)	    |
; |	Copyright (c) 2007 by DataRescue sa/nv,	<ida@datarescue.com>	    |
; |	    Licensed to: GVU, Gerhard Uphoff, 1	user, adv, 10/2007	    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	6D7CC0597832729C19D15123D70EC29B

; ---------------------------------------------------------------------------
; File Name   :	Z:\emu\gen\s2a\sym\copies\code_69464
; Format      :	Binary file
; Base Address:	0000h Range: 0000h - 0642h Loaded length: 0642h

; Processor:	    68000
; Target Assembler: 680x0 Assembler in MRI compatible mode
; This file should be compiled with "as	-M"

; ===========================================================================

; Segment type:	Pure code
; segment "ROM"

score:
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	score_move_tbl(pc,d0.w),d1
		jmp	score_move_tbl(pc,d1.w)
; ---------------------------------------------------------------------------
score_move_tbl:	dc.w score_init-score_move_tbl ; DATA XREF: ROM:score_move_tblo
					; ROM:00000010o
		dc.w score_move-score_move_tbl
; ---------------------------------------------------------------------------

score_init:				; DATA XREF: ROM:score_move_tblo
		addq.b	#2,$24(a0)
		move.w	#$90,8(a0) ; 'ê'
		move.w	#$108,$A(a0)
		move.l	#$1A0F8,4(a0)
		move.w	#$6CA,2(a0)
		bsr.w	$A84		; XREF:	dualmodesub
		move.b	#0,1(a0)
		move.b	#0,$18(a0)

score_move:				; DATA XREF: ROM:00000010o
		tst.w	($FFFFFE20).w
		beq.s	_jump$udba
		moveq	#0,d0
		btst	#3,($FFFFFE05).w
		bne.s	_jump0$udba
		cmp.b	#9,($FFFFFE23).w
		bne.s	_jump0$udba
		addq.w	#2,d0

_jump0$udba:				; CODE XREF: ROM:0000004Ej
					; ROM:00000056j
		move.b	d0,$1A(a0)
		jmp	$C758		; XREF:	actionsub
; ---------------------------------------------------------------------------

_jump$udba:				; CODE XREF: ROM:00000044j
		moveq	#0,d0
		btst	#3,($FFFFFE05).w
		bne.s	_jump2$udba
		addq.w	#1,d0
		cmp.b	#9,($FFFFFE23).w
		bne.s	_jump2$udba
		addq.w	#2,d0

_jump2$udba:				; CODE XREF: ROM:0000006Cj
					; ROM:00000076j
		move.b	d0,$1A(a0)
		jmp	$C758		; XREF:	actionsub
; ---------------------------------------------------------------------------
scorepat:	dc.w scoresp0-scorepat	; DATA XREF: ROM:scorepato
					; ROM:00000086o ...
		dc.w scoresp1-scorepat
		dc.w scoresp2-scorepat
		dc.w scoresp3-scorepat
scoresp0:	dc.w $A			; DATA XREF: ROM:scorepato
		dc.w $800D,$A000,$A000,	   0; 0
		dc.w $800D,$A018,$A00C,	 $20; 4
		dc.w $800D,$A020,$A010,	 $40; 8
		dc.w $900D,$A010,$A008,	   0; 12
		dc.w $900D,$A028,$A014,	 $28; 16
		dc.w $A00D,$A008,$A004,	   0; 20
		dc.w $A001,$A000,$A000,	 $20; 24
		dc.w $A009,$A030,$A018,	 $30; 28
		dc.w $4005,$810A,$8085,	   0; 32
		dc.w $400D,$A10E,$A087,	 $10; 36
scoresp1:	dc.w $A			; DATA XREF: ROM:00000086o
		dc.w $800D,$A000,$A000,	   0; 0
		dc.w $800D,$A018,$A00C,	 $20; 4
		dc.w $800D,$A020,$A010,	 $40; 8
		dc.w $900D,$A010,$A008,	   0; 12
		dc.w $900D,$A028,$A014,	 $28; 16
		dc.w $A00D,$8008,$8004,	   0; 20
		dc.w $A001,$8000,$8000,	 $20; 24
		dc.w $A009,$A030,$A018,	 $30; 28
		dc.w $4005,$810A,$8085,	   0; 32
		dc.w $400D,$A10E,$A087,	 $10; 36
scoresp2:	dc.w $A			; DATA XREF: ROM:00000088o
		dc.w $800D,$A000,$A000,	   0; 0
		dc.w $800D,$A018,$A00C,	 $20; 4
		dc.w $800D,$A020,$A010,	 $40; 8
		dc.w $900D,$8010,$8008,	   0; 12
		dc.w $900D,$A028,$A014,	 $28; 16
		dc.w $A00D,$A008,$A004,	   0; 20
		dc.w $A001,$A000,$A000,	 $20; 24
		dc.w $A009,$A030,$A018,	 $30; 28
		dc.w $4005,$810A,$8085,	   0; 32
		dc.w $400D,$A10E,$A087,	 $10; 36
scoresp3:	dc.w $A			; DATA XREF: ROM:0000008Ao
		dc.w $800D,$A000,$A000,	   0; 0
		dc.w $800D,$A018,$A00C,	 $20; 4
		dc.w $800D,$A020,$A010,	 $40; 8
		dc.w $900D,$8010,$8008,	   0; 12
		dc.w $900D,$A028,$A014,	 $28; 16
		dc.w $A00D,$8008,$8004,	   0; 20
		dc.w $A001,$8000,$8000,	 $20; 24
		dc.w $A009,$A030,$A018,	 $30; 28
		dc.w $4005,$810A,$8085,	   0; 32
		dc.w $400D,$A10E,$A087,	 $10; 36
; ---------------------------------------------------------------------------

scoreup:
		move.b	#1,($FFFFFE1F).w
		lea	($FFFFFE26).w,a3
		add.l	d0,(a3)
		move.l	#$F423F,d1
		cmp.l	(a3),d1
		bhi.s	_jump$aeba
		move.l	d1,(a3)

_jump$aeba:				; CODE XREF: ROM:000001E8j
		move.l	(a3),d0
		cmp.l	($FFFFFFC0).w,d0
		bcs.s	_jumpus$aeba
		add.l	#$1388,($FFFFFFC0).w
		tst.b	($FFFFFFF8).w
		bmi.s	_jumpus$aeba
		addq.b	#1,($FFFFFE12).w
		addq.b	#1,($FFFFFE1C).w
		move.w	#$88,d0	; 'à'
		jmp	($12F6).l	; XREF:	bgmset
; ---------------------------------------------------------------------------

_jumpus$aeba:				; CODE XREF: ROM:000001F2j
					; ROM:00000200j
		rts
; ---------------------------------------------------------------------------

scoreset:
		nop
		lea	($C00000).l,a6
		tst.w	($FFFFFFFA).w
		bne.w	scoreset2
		tst.b	($FFFFFE1F).w
		beq.s	_jump$beba
		clr.b	($FFFFFE1F).w
		move.l	#$5C800003,d0
		move.l	($FFFFFE26).w,d1
		bsr.w	scorewrt

_jump$beba:				; CODE XREF: ROM:0000022Aj
		tst.b	($FFFFFE1D).w
		beq.s	_jump2$beba
		bpl.s	_jump1$beba
		bsr.w	ringinit

_jump1$beba:				; CODE XREF: ROM:00000244j
		clr.b	($FFFFFE1D).w
		move.l	#$5F400003,d0
		moveq	#0,d1
		move.w	($FFFFFE20).w,d1
		bsr.w	ringwrt

_jump2$beba:				; CODE XREF: ROM:00000242j
		tst.b	($FFFFFE1E).w
		beq.s	_jump4$beba
		tst.w	($FFFFF63A).w
		bne.s	_jump4$beba
		lea	($FFFFFE22).w,a1
		cmp.l	#$93B3B,(a1)+
		nop
		addq.b	#1,-(a1)
		cmp.b	#$3C,(a1) ; '<'
		bcs.s	_jump4$beba
		move.b	#0,(a1)
		addq.b	#1,-(a1)
		cmp.b	#$3C,(a1) ; '<'
		bcs.s	_jump3$beba
		move.b	#0,(a1)
		addq.b	#1,-(a1)
		cmp.b	#9,(a1)
		bcs.s	_jump3$beba
		move.b	#9,(a1)

_jump3$beba:				; CODE XREF: ROM:00000288j
					; ROM:00000294j
		move.l	#$5E400003,d0
		moveq	#0,d1
		move.b	($FFFFFE23).w,d1
		bsr.w	timewrt1
		move.l	#$5EC00003,d0
		moveq	#0,d1
		move.b	($FFFFFE24).w,d1
		bsr.w	timewrt

_jump4$beba:				; CODE XREF: ROM:00000262j
					; ROM:00000268j ...
		tst.b	($FFFFFE1C).w
		beq.s	_jump5$beba
		clr.b	($FFFFFE1C).w
		bsr.w	playsuuwrt

_jump5$beba:				; CODE XREF: ROM:000002BEj
		tst.b	($FFFFF7D6).w
		beq.s	_jump6$beba
		clr.b	($FFFFF7D6).w
		move.l	#$6E000002,($C00004).l
		moveq	#0,d1
		move.w	($FFFFF7D2).w,d1
		bsr.w	bonuswrt
		moveq	#0,d1
		move.w	($FFFFF7D4).w,d1
		bsr.w	bonuswrt

_jump6$beba:				; CODE XREF: ROM:000002CCj
		rts
; ---------------------------------------------------------------------------

_timeover$beba:
		clr.b	($FFFFFE1E).w
		lea	($FFFFB000).w,a0
		move.l	a0,a2
		bsr.w	$FFFFE9FE	; XREF:	playdieset
		move.b	#1,($FFFFFE1A).w
		rts
; ---------------------------------------------------------------------------

scoreset2:				; CODE XREF: ROM:00000222j
		bsr.w	posiwrt
		tst.b	($FFFFFE1D).w
		beq.s	_jump2$ceba
		bpl.s	_jump1$ceba
		bsr.w	ringinit

_jump1$ceba:				; CODE XREF: ROM:00000312j
		clr.b	($FFFFFE1D).w
		move.l	#$5F400003,d0
		moveq	#0,d1
		move.w	($FFFFFE20).w,d1
		bsr.w	ringwrt

_jump2$ceba:				; CODE XREF: ROM:00000310j
		move.l	#$5EC00003,d0
		moveq	#0,d1
		move.b	($FFFFF62C).w,d1
		bsr.w	timewrt

_jump3$ceba:
		tst.b	($FFFFFE1C).w
		beq.s	_jump4$ceba
		clr.b	($FFFFFE1C).w
		bsr.w	playsuuwrt

_jump4$ceba:				; CODE XREF: ROM:00000340j
		tst.b	($FFFFF7D6).w
		beq.s	_jump5$ceba
		clr.b	($FFFFF7D6).w
		move.l	#$6E000002,($C00004).l
		moveq	#0,d1
		move.w	($FFFFF7D2).w,d1
		bsr.w	bonuswrt
		moveq	#0,d1
		move.w	($FFFFF7D4).w,d1
		bsr.w	bonuswrt

_jump5$ceba:				; CODE XREF: ROM:0000034Ej
		rts

; =============== S U B	R O U T	I N E =======================================


ringinit:				; CODE XREF: ROM:00000246p
					; ROM:00000314p
		move.l	#$5F400003,($C00004).l
		lea	ringinittbl,a2
		move.w	#2,d2
		bra.s	scoreinitsub
; ---------------------------------------------------------------------------

scoreinit:
		lea	($C00000).l,a6
		bsr.w	playsuuwrt
		move.l	#$5C400003,($C00004).l
		lea	scoreinittbl,a2
		move.w	#$E,d2

scoreinitsub:				; CODE XREF: ringinit+12j
		lea	$642,a1

_loop$feba:				; CODE XREF: ringinit:_jump$febaj
		move.w	#$F,d1
		move.b	(a2)+,d0
		bmi.s	_loop2$feba
		ext.w	d0
		lsl.w	#5,d0
		lea	(a1,d0.w),a3

_loop1$feba:				; CODE XREF: ringinit+46j
		move.l	(a3)+,(a6)
		dbf	d1,_loop1$feba

_jump$feba:				; CODE XREF: ringinit+5Aj
		dbf	d2,_loop$feba
		rts
; ---------------------------------------------------------------------------

_loop2$feba:				; CODE XREF: ringinit+3Aj ringinit+56j
		move.l	#0,(a6)
		dbf	d1,_loop2$feba
		bra.s	_jump$feba
; End of function ringinit

; ---------------------------------------------------------------------------
scoreinittbl:	dc.b $16,$FF,$FF,$FF,$FF,$FF,$FF,  0,  0,$14,  0,  0; 0
					; DATA XREF: ringinit+28o
ringinittbl:	dc.b $FF,$FF,  0,  0	; 0 ; DATA XREF: ringinit+Ao

; =============== S U B	R O U T	I N E =======================================


posiwrt:				; CODE XREF: ROM:scoreset2p
		move.l	#$5C400003,($C00004).l
		move.w	($FFFFEE00).w,d1
		move.w	($FFFFFFEC).w,d1
		swap	d1
		move.w	($FFFFB008).w,d1
		bsr.s	hexwrtw
		move.w	($FFFFEE04).w,d1
		move.w	($FFFFFFEE).w,d1
		swap	d1
		move.w	($FFFFB00C).w,d1
; End of function posiwrt


; =============== S U B	R O U T	I N E =======================================


hexwrtw:				; CODE XREF: posiwrt+18p
		moveq	#7,d6
		lea	($4E8).l,a1	; XREF:	ascii

_loop$jeba:				; CODE XREF: hexwrtw+32j
		rol.w	#4,d1
		move.w	d1,d2
		and.w	#$F,d2
		cmp.w	#$A,d2
		bcs.s	_jump$jeba
		add.w	#7,d2

_jump$jeba:				; CODE XREF: hexwrtw+14j
		lsl.w	#5,d2
		lea	(a1,d2.w),a3
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)

_jump5$jeba:
		swap	d1
		dbf	d6,_loop$jeba
		rts
; End of function hexwrtw


; =============== S U B	R O U T	I N E =======================================


ringwrt:				; CODE XREF: ROM:0000025Ap
					; ROM:00000328p
		lea	($1A580).l,a2
		moveq	#2,d6
		bra.s	scorewrt2
; End of function ringwrt


; =============== S U B	R O U T	I N E =======================================


scorewrt:				; CODE XREF: ROM:0000023Ap
		lea	($1A574).l,a2
		moveq	#5,d6

scorewrt2:				; CODE XREF: ringwrt+8j
		moveq	#0,d4
		lea	$642,a1

_loop$meba:				; CODE XREF: scorewrt+58j
		moveq	#0,d2
		move.l	(a2)+,d3

_jump2$meba:				; CODE XREF: scorewrt+18j
		sub.l	d3,d1
		bcs.s	_jump3$meba
		addq.w	#1,d2
		bra.s	_jump2$meba
; ---------------------------------------------------------------------------

_jump3$meba:				; CODE XREF: scorewrt+14j
		add.l	d3,d1
		tst.w	d2
		beq.s	_jump4$meba
		move.w	#1,d4

_jump4$meba:				; CODE XREF: scorewrt+1Ej
		tst.w	d4
		beq.s	_jump5$meba
		lsl.w	#6,d2
		move.l	d0,4(a6)
		lea	(a1,d2.w),a3
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)

_jump5$meba:				; CODE XREF: scorewrt+26j
		add.l	#$400000,d0
		dbf	d6,_loop$meba
		rts
; End of function scorewrt

; ---------------------------------------------------------------------------

contwrt:
		move.l	#$5F800003,($C00004).l
		lea	($C00000).l,a6
		lea	($1A584).l,a2
		moveq	#1,d6
		moveq	#0,d4
		lea	$642,a1

_loop$neba:				; CODE XREF: ROM:000004FAj
		moveq	#0,d2
		move.l	(a2)+,d3

_jump2$neba:				; CODE XREF: ROM:000004D0j
		sub.l	d3,d1
		bcs.s	_jump3$neba
		addq.w	#1,d2
		bra.s	_jump2$neba
; ---------------------------------------------------------------------------

_jump3$neba:				; CODE XREF: ROM:000004CCj
		add.l	d3,d1
		lsl.w	#6,d2
		lea	(a1,d2.w),a3
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		dbf	d6,_loop$neba
		rts
; ---------------------------------------------------------------------------
subtbl:		dc.l 100000
		dc.l 10000
subtbl4:	dc.l 1000		; DATA XREF: bonuswrto
subtbl3:	dc.l 100
subtbl2:	dc.l 10			; DATA XREF: timewrto playsuuwrt+Co
subtbl1:	dc.l 1			; DATA XREF: timewrt1o

; =============== S U B	R O U T	I N E =======================================


timewrt1:				; CODE XREF: ROM:000002A6p
		lea	subtbl1,a2
		moveq	#0,d6
		bra.s	timewrt0
; End of function timewrt1


; =============== S U B	R O U T	I N E =======================================


timewrt:				; CODE XREF: ROM:000002B6p
					; ROM:00000338p
		lea	subtbl2,a2
		moveq	#1,d6

timewrt0:				; CODE XREF: timewrt1+6j
		moveq	#0,d4
		lea	$642,a1

_loop$veba:				; CODE XREF: timewrt+52j
		moveq	#0,d2
		move.l	(a2)+,d3

_jump2$veba:				; CODE XREF: timewrt+16j
		sub.l	d3,d1
		bcs.s	_jump3$veba
		addq.w	#1,d2
		bra.s	_jump2$veba
; ---------------------------------------------------------------------------

_jump3$veba:				; CODE XREF: timewrt+12j
		add.l	d3,d1
		tst.w	d2
		beq.s	_jump4$veba
		move.w	#1,d4

_jump4$veba:				; CODE XREF: timewrt+1Cj
		lsl.w	#6,d2
		move.l	d0,4(a6)
		lea	(a1,d2.w),a3
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		add.l	#$400000,d0
		dbf	d6,_loop$veba
		rts
; End of function timewrt


; =============== S U B	R O U T	I N E =======================================


bonuswrt:				; CODE XREF: ROM:000002E2p
					; ROM:000002ECp ...
		lea	subtbl4,a2
		moveq	#3,d6
		moveq	#0,d4
		lea	$642,a1

_loop$weba:				; CODE XREF: bonuswrt:_jump5$webaj
		moveq	#0,d2
		move.l	(a2)+,d3

_jump2$weba:				; CODE XREF: bonuswrt+16j
		sub.l	d3,d1
		bcs.s	_jump3$weba
		addq.w	#1,d2
		bra.s	_jump2$weba
; ---------------------------------------------------------------------------

_jump3$weba:				; CODE XREF: bonuswrt+12j
		add.l	d3,d1
		tst.w	d2
		beq.s	_jump4$weba
		move.w	#1,d4

_jump4$weba:				; CODE XREF: bonuswrt+1Cj
		tst.w	d4
		beq.s	_jump7$weba
		lsl.w	#6,d2
		lea	(a1,d2.w),a3
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)

_jump5$weba:				; CODE XREF: bonuswrt+5Ej
		dbf	d6,_loop$weba
		rts
; ---------------------------------------------------------------------------

_jump7$weba:				; CODE XREF: bonuswrt+24j
		moveq	#$F,d5

_loop2$weba:				; CODE XREF: bonuswrt+5Aj
		move.l	#0,(a6)
		dbf	d5,_loop2$weba
		bra.s	_jump5$weba
; End of function bonuswrt


; =============== S U B	R O U T	I N E =======================================


playsuuwrt:				; CODE XREF: ROM:000002C4p
					; ROM:00000346p ...
		move.l	#$7BA00003,d0
		moveq	#0,d1
		move.b	($FFFFFE12).w,d1
		lea	subtbl2,a2
		moveq	#1,d6
		moveq	#0,d4
		lea	$942,a1

_loop$xeba:				; CODE XREF: playsuuwrt+52j
		move.l	d0,4(a6)
		moveq	#0,d2
		move.l	(a2)+,d3

_jump2$xeba:				; CODE XREF: playsuuwrt+26j
		sub.l	d3,d1
		bcs.s	_jump3$xeba
		addq.w	#1,d2
		bra.s	_jump2$xeba
; ---------------------------------------------------------------------------

_jump3$xeba:				; CODE XREF: playsuuwrt+22j
		add.l	d3,d1
		tst.w	d2
		beq.s	_jump4$xeba
		move.w	#1,d4

_jump4$xeba:				; CODE XREF: playsuuwrt+2Cj
		tst.w	d4
		beq.s	_jump7$xeba

_jump5$xeba:				; CODE XREF: playsuuwrt+5Aj
		lsl.w	#5,d2
		lea	(a1,d2.w),a3
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)

_jump6$xeba:				; CODE XREF: playsuuwrt+68j
		add.l	#$400000,d0
		dbf	d6,_loop$xeba
		rts
; ---------------------------------------------------------------------------

_jump7$xeba:				; CODE XREF: playsuuwrt+34j
		tst.w	d6
		beq.s	_jump5$xeba
		moveq	#7,d5

_loop2$xeba:				; CODE XREF: playsuuwrt+64j
		move.l	#0,(a6)
		dbf	d5,_loop2$xeba
		bra.s	_jump6$xeba
; End of function playsuuwrt

; end of 'ROM'


		END
