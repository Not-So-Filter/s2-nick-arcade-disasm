

;
; +-------------------------------------------------------------------------+
; |	This file is generated by The Interactive Disassembler (IDA)	    |
; |	Copyright (c) 2007 by DataRescue sa/nv,	<ida@datarescue.com>	    |
; |	    Licensed to: GVU, Gerhard Uphoff, 1	user, adv, 10/2007	    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	BA511A06EE3C8295B8B2B8461D814253

; ---------------------------------------------------------------------------
; File Name   :	Z:\emu\gen\s2a\sym\copies\code_5a12c
; Format      :	Binary file
; Base Address:	0000h Range: 0000h - 0274h Loaded length: 0274h

; Processor:	    68000
; Target Assembler: 680x0 Assembler in MRI compatible mode
; This file should be compiled with "as	-M"

; ===========================================================================

; Segment type:	Pure code
; segment "ROM"

snail:					; XREF:	frameout
		bra.w	$274
; ---------------------------------------------------------------------------
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	snail_move_tbl(pc,d0.w),d1
		jmp	snail_move_tbl(pc,d1.w)
; ---------------------------------------------------------------------------
snail_move_tbl:	dc.w snailinit-snail_move_tbl ;	DATA XREF: ROM:snail_move_tblo
					; ROM:00000014o ...
		dc.w snailmove-snail_move_tbl
		dc.w snailturn-snail_move_tbl
		dc.w updateparts-snail_move_tbl
		dc.w afbupdate-snail_move_tbl
; ---------------------------------------------------------------------------

snailinit:				; DATA XREF: ROM:snail_move_tblo
		move.l	#$16838,4(a0)
		move.w	#$402,2(a0)
		or.b	#4,1(a0)
		move.b	#$A,$20(a0)
		move.b	#4,$18(a0)
		move.b	#$10,$19(a0)
		move.b	#$10,$16(a0)
		move.b	#$E,$17(a0)
		bsr.w	$27A		; XREF:	actwkchk2
		bne.s	_out1$deba
		move.b	#$54,0(a1) ; 'T'
		move.b	#6,$24(a1)
		move.l	#$16838,4(a1)
		move.w	#$2402,2(a1)
		move.b	#3,$18(a1)
		move.b	#$10,$19(a1)
		move.b	$22(a0),$22(a1)
		move.b	1(a0),1(a1)
		move.l	a0,$2A(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.b	#2,$1A(a1)

_out1$deba:				; CODE XREF: ROM:00000052j
		addq.b	#2,$24(a0)
		move.w	#$FF80,d0
		btst	#0,$22(a0)
		beq.s	_cnt$deba
		neg.w	d0

_cnt$deba:				; CODE XREF: ROM:000000AAj
		move.w	d0,$10(a0)
		rts
; ---------------------------------------------------------------------------

snailmove:				; DATA XREF: ROM:00000014o
		bsr.w	chkcharge
		bsr.w	$292		; XREF:	speedset2
		jsr	$128C6		; XREF:	emycol_d
		cmp.w	#$FFF8,d1
		blt.s	_jump$eeba
		cmp.w	#$C,d1
		bge.s	_jump$eeba
		add.w	d1,$C(a0)
		lea	($1682C).l,a1
		bsr.w	$280		; XREF:	patchg
		bra.w	$286		; XREF:	frameoutchkd
; ---------------------------------------------------------------------------

_jump$eeba:				; CODE XREF: ROM:000000C6j
					; ROM:000000CCj
		addq.b	#2,$24(a0)
		move.w	#$14,$30(a0)
		st	$34(a0)
		lea	($1682C).l,a1
		bsr.w	$280		; XREF:	patchg
		bra.w	$286		; XREF:	frameoutchkd

; =============== S U B	R O U T	I N E =======================================


chkcharge:				; CODE XREF: ROM:snailmovep
		tst.b	$35(a0)
		bne.s	_done$feba
		move.w	($FFFFB008).w,d0
		sub.w	8(a0),d0
		cmp.w	#$64,d0	; 'd'
		bgt.s	_done$feba
		cmp.w	#$FF9C,d0
		blt.s	_done$feba
		tst.w	d0
		bmi.s	_toright$feba

_toleft$feba:
		btst	#0,$22(a0)
		beq.s	_done$feba
		bra.s	_doit$feba
; ---------------------------------------------------------------------------

_toright$feba:				; CODE XREF: chkcharge+1Cj
		btst	#0,$22(a0)
		bne.s	_done$feba

_doit$feba:				; CODE XREF: chkcharge+26j
		move.w	$10(a0),d0
		asl.w	#2,d0
		move.w	d0,$10(a0)
		st	$35(a0)
		bsr.w	makeafb

_done$feba:				; CODE XREF: chkcharge+4j
					; chkcharge+12j ...
		rts
; End of function chkcharge


; =============== S U B	R O U T	I N E =======================================


makeafb:				; CODE XREF: chkcharge+3Ep
		bsr.w	$27A		; XREF:	actwkchk2
		bne.s	_out$geba
		move.b	#$54,0(a1) ; 'T'
		move.b	#8,$24(a1)
		move.l	#$15A34,4(a1)	; XREF:	wasppat
		move.w	#$3E6,2(a1)
		move.b	#4,$18(a1)
		move.b	#$10,$19(a1)
		move.b	$22(a0),$22(a1)
		move.b	1(a0),1(a1)
		move.l	a0,$2A(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		addq.w	#7,$C(a1)
		add.w	#$D,8(a1)
		move.b	#1,$1C(a1)

_out$geba:				; CODE XREF: makeafb+4j
		rts
; End of function makeafb

; ---------------------------------------------------------------------------

afbupdate:				; DATA XREF: ROM:0000001Ao
		move.l	$2A(a0),a1
		tst.b	$34(a1)
		bne.w	$274		; XREF:	frameout
		move.w	8(a1),8(a0)
		move.w	$C(a1),$C(a0)
		addq.w	#7,$C(a0)
		moveq	#$D,d0
		btst	#0,$22(a0)
		beq.s	_cnt$heba
		neg.w	d0

_cnt$heba:				; CODE XREF: ROM:000001BEj
		add.w	d0,8(a0)
		lea	($15A18).l,a1	; XREF:	waspchg
		bsr.w	$280		; XREF:	patchg
		bra.w	$286		; XREF:	frameoutchkd
; ---------------------------------------------------------------------------

snailturn:				; DATA XREF: ROM:00000016o
		sub.w	#1,$30(a0)
		bpl.w	$286		; XREF:	frameoutchkd
		neg.w	$10(a0)
		bsr.w	$28C		; XREF:	speedset
		move.w	$10(a0),d0
		asr.w	#2,d0
		move.w	d0,$10(a0)
		bchg	#0,$22(a0)
		bchg	#0,1(a0)
		subq.b	#2,$24(a0)
		sf	$34(a0)
		sf	$35(a0)
		bra.w	$286		; XREF:	frameoutchkd
; ---------------------------------------------------------------------------

updateparts:				; DATA XREF: ROM:00000018o
		move.l	$2A(a0),a1
		cmp.b	#$54,(a1) ; 'T'
		bne.w	$274		; XREF:	frameout
		move.w	8(a1),8(a0)
		move.w	$C(a1),$C(a0)
		move.b	$22(a1),$22(a0)
		move.b	1(a1),1(a0)
		bra.w	$286		; XREF:	frameoutchkd
; ---------------------------------------------------------------------------
snailchg:	dc.w snailchg0-snailchg	; DATA XREF: ROM:snailchgo
					; ROM:00000236o
		dc.w snailchg1-snailchg
snailchg0:	dc.b   5,  0,  1,$FF	; 0 ; DATA XREF: ROM:snailchgo
snailchg1:	dc.b   1,  0,  1,$FF	; 0 ; DATA XREF: ROM:00000236o
snailpat:	dc.w snailsp0-snailpat	; DATA XREF: ROM:snailpato
					; ROM:00000242o ...
		dc.w snailsp1-snailpat
		dc.w snailsp2-snailpat
snailsp0:	dc.w 2			; DATA XREF: ROM:snailpato
		dc.w $F00F,    0,    0,$FFF0; 0
		dc.w  $109,  $14,   $A,$FFF4; 4
snailsp1:	dc.w 2			; DATA XREF: ROM:00000242o
		dc.w $F00F,    0,    0,$FFF0; 0
		dc.w  $109,$1014,$100A,$FFF4; 4
snailsp2:	dc.w 1			; DATA XREF: ROM:00000244o
		dc.w $FA05,  $10,    8,$FFE9; 0
; end of 'ROM'


		END
